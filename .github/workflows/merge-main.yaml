name: publish

on:
  push:
    branches:
      - main

env:
  CI: true
  APPLICATION_NAME: clientfrontendv2
  SOURCE_DIR: build
  NPM_REGISTRY: npm.pkg.github.com

jobs:
  install:
    name: install
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@main

      - uses: actions/cache@v1
        with:
          path: node_modules
          key: build-cache-${{ hashFiles('**/package-lock.json') }}

      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Prepare .npmrc
        run: echo "//${{ env.NPM_REGISTRY }}/:_authToken=${{ secrets.NPM_AUTH_TOKEN }}" >> .npmrc

      - name: Install dependencies
        run: yarn install --frozen-lockfile --ignore-scripts

  test:
    runs-on: ubuntu-18.04
    needs: install
    steps:
      - uses: actions/checkout@main

      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - uses: actions/cache@v1
        with:
          path: node_modules
          key: build-cache-${{ hashFiles('**/package-lock.json') }}

      - name: Unit tests
        run: yarn test

  version:
    name: version check
    runs-on: ubuntu-18.04
    needs: test
    steps:
      - uses: actions/checkout@main

      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Get local version
        id: local_version
        run: echo ::set-output name=value::$(cat ./package.json | jq --raw-output .version)

      - name: Authenticate GPR
        run: echo "//${{ env.NPM_REGISTRY }}/:_authToken=${{ secrets.NPM_AUTH_TOKEN }}" >> .npmrc

      - name: Get registry version
        id: registry_version
        run: echo ::set-output name=value::$(npm view ${{ github.repository }} version)

      - name: Validate version
        uses: actions/github-script@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const local_version = '${{ steps.local_version.outputs.value }}';
            const registry_version = '${{ steps.registry_version.outputs.value }}';
            core.info(`Repository version: ${local_version}`);
            core.info(`Registry version: ${registry_version}`);
            if (registry_version === local_version) {
              core.setFailed('Please bump version before merging');
            }

  publish:
    runs-on: ubuntu-18.04
    needs: version
    steps:
      - uses: actions/checkout@main

      - uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      - name: Install dependencies
        run: yarn install --frozen-lockfile --ignore-scripts

      - name: Authenticate GPR
        run: echo "//${{ env.NPM_REGISTRY }}/:_authToken=${{ secrets.NPM_AUTH_TOKEN }}" >> .npmrc

      - name: Publish
        run: yarn publish

      - uses: actions-ecosystem/action-push-tag@v1
        with:
          tag: ${{ steps.local_version.outputs.value }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-artifact
          path: ${{ env.SOURCE_DIR }}

  deploy:
    runs-on: ubuntu-18.04
    needs: publish
    env:
      SOURCE_DIR: build
      AWS_REGION: eu-west-1
      AWS_S3_BUCKET: lmaas-clientfrontend-gideon-dev-890530445547-eu-west-1
    steps:
      - uses: actions/download-artifact@master
        with:
          name: build-artifact
          path: ${{ env.SOURCE_DIR }}

      - name: Configure AWS CREDENTIALS
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to S3
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --follow-symlinks --delete
        env:
          SOURCE_DIR: ${{ env.SOURCE_DIR }}
          AWS_S3_BUCKET: ${{ env.AWS_S3_BUCKET }}

  #     - name: Retreive CloudFront distribution id
  #       run: |
  #         cloudfrontdistids=$(aws cloudfront list-distributions | jq -r ".DistributionList.Items[].ARN")
  #         for dist in $cloudfrontdistids; do
  #           if [ $(aws cloudfront list-tags-for-resource --resource $dist --query "Tags.Items[?Key=='Application'].Value[]" --output text) == ${{ env.APPLICATION }} ]; then
  #              CLOUDFRONT_DISTRIBUTION_ID=${dist##*/}
  #           fi
  #         done
  #         echo "Cloudfront distributionid : $CLOUDFRONT_DISTRIBUTION_ID"
  #         echo "DISTRIBUTION=$CLOUDFRONT_DISTRIBUTION_ID" >> $GITHUB_ENV

  #     - name: Invalidate CloudFront cache of distribution ${{ env.DISTRIBUTION }}
  #       uses: chetan/invalidate-cloudfront-action@master
  #       env:
  #         PATHS: '/*'
  #         AWS_REGION: ${{ env.AWS_DEFAULT_REGION }}
